filter {
  if [message] =~ "^2xFFFFFF.*" {
    grok {
      match => {
        "message" => "2xFFFFFF\|:,_\|%{DATA:bytes_sent}\|:,_\|%{DATA}\|:,_\|%{DATA}\|:,_\|%{DATA}\|:,_\|%{DATA}\|:,_\|%{DATA}\|:,_\|%{DATA:http_referer}\|:,_\|%{DATA:http_user_agent}\|:,_\|%{DATA:http_x_forwarded_for}\|:,_\|%{DATA:remote_addr}\|:,_\|%{DATA:request} HTTP%{DATA}\|:,_\|%{DATA:request_time}\|:,_\|%{DATA:status}\|:,_\|%{DATA}\|:,_\|%{DATA:upstream_response_time}\|:,_\|%{DATA}\|:,_\|%{DATA}\|:,_\|%{DATA}\|:,_\|-\|:,_\|%{DATA:msec_end}\|:,_\|"
      }
    }

    mutate {
      remove_field => [ "log", "beat", "host", "message" ]

      convert => { 
        "bytes_sent" => "integer"
        "request_time" => "float"
        "status" => "integer"
      }

      rename => { "remote_addr" => "geoip.ip" }
    }

    ruby {
      code => "event.set('[msec_start]', '%.3f' % (event.get('[msec_end]').to_f - event.get('[request_time]').to_f))"
    }

    date {
      match => ["msec_start", "UNIX"]
      target => "request_start"

      remove_field => ["msec_start"]
    }

    date {
      match => ["msec_end", "UNIX"]
      target => "request_end"

      remove_field => ["msec_end"]
    }
  }
}
